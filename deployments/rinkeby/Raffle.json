{
  "address": "0xb5B260B8046Fb673CC20bb0045A617f8Bc9C1A64",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequesteRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "empty",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x460124aaa27eed2bc4b4c1e4ea3dd911f141fc73d5679f5197c6b5957416fe97",
  "receipt": {
    "to": null,
    "from": "0x8aA50Fd50beCA814AAF03D01A396854C0096B0f3",
    "contractAddress": "0xb5B260B8046Fb673CC20bb0045A617f8Bc9C1A64",
    "transactionIndex": 2,
    "gasUsed": "1264706",
    "logsBloom": "0x
    "blockHash": "0xf836485b492ef478a681c3a6aa58666f11e70cfc181bfab97a1ea0a921363b95",
    "transactionHash": "0x460124aaa27eed2bc4b4c1e4ea3dd911f141fc73d5679f5197c6b5957416fe97",
    "logs": [],
    "blockNumber": 10894654,
    "cumulativeGasUsed": "1306706",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "6964",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "a91287105f6be09844701ec833a349d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequesteRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"empty\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Dinesh Jayasiri\",\"details\":\"this implements Cahinlink VRF v2 and cahinlink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Raffle Contracts \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//Raffle\\r\\n//Enter the lottery (paying some amount)\\r\\n//Pick a random winner (varifiable random)\\r\\n//Winner to be selected every X minutes -> completly automated\\r\\n//Chainlink Oracle -> Randomness, Automated Execution(cahinlink Keeper)\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughETHEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\n\\r\\n/** @title A sample Raffle Contracts \\r\\n*   @author Dinesh Jayasiri\\r\\n*   @notice This contract is for creating an untamperable decentralized smart contract\\r\\n*   @dev this implements Cahinlink VRF v2 and cahinlink keepers\\r\\n*/\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface{\\r\\n    /* Type declarations */\\r\\n    enum RaffleState {\\r\\n        OPEN,              \\r\\n        CALCULATING       \\r\\n    }\\r\\n    //OPEN -> 0, CALCULATING -> 1\\r\\n    /* State Variables */\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private  s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    bytes public empty;\\r\\n    \\r\\n\\r\\n    //lottery Variables\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    /* Events */\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequesteRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n/*functions */\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2, \\r\\n    uint256 entranceFee,bytes32 gasLane, \\r\\n    uint64 subscriptionId,\\r\\n    uint32 callbackGasLimit,\\r\\n    uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId=subscriptionId;\\r\\n        i_callbackGasLimit= callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if(msg.value< i_entranceFee){revert Raffle__NotEnoughETHEntered();}\\r\\n        if(s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    function checkUpkeep(bytes memory /*checkData*/)  public\\r\\n        view\\r\\n        override returns (bool upkeepNeeded,bytes memory /*performData*/) {\\r\\n\\r\\n\\r\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp)>i_interval);\\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = address(this).balance >0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\r\\n        (bool upkeepNeeded,) = checkUpkeep(\\\"\\\");\\r\\n        if(!upkeepNeeded){\\r\\n            revert Raffle__UpkeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_raffleState)\\r\\n            );\\r\\n        }\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n       uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane, \\r\\n            i_subscriptionId, \\r\\n            REQUEST_CONFIRMATION, \\r\\n            i_callbackGasLimit, \\r\\n            NUM_WORDS);\\r\\n\\r\\n            emit RequesteRaffleWinner(requestId);\\r\\n\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        (bool success,) = recentWinner.call{value:address(this).balance}(\\\"\\\");\\r\\n        \\r\\n\\r\\n        if(!success){\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n\\r\\n        emit WinnerPicked(recentWinner);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    /* View/ pure functions */\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256){\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns(RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n    function getNumWords() public pure returns(uint256){\\r\\n        return NUM_WORDS;\\r\\n    } \\r\\n\\r\\n    function getNumberOfPlayers( ) public view returns(uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLastTimeStamp() public view returns(uint256){\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n    function getInterval() public view returns(uint256){\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n    //14:16 14:45\\r\\n}\",\"keccak256\":\"0x60df3b74dfca028faae8bf377a4d696342c78abf5b455e5ba5133bd30cdb2688\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200191f3803806200191f833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600260146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426003819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611550620003cf600039600081816107e0015261084e0152600061069c01526000610679015260006106580152600061061c0152600081816102fa01526103f7015260008181610337015261038b01526115506000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f578063c1c244e811610059578063c1c244e814610238578063e55ae4e814610263578063f2a75fe4146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780636e04ff0d146101cf57806391ad27b41461020d576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c4e565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610ce0565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e94565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610f4b565b610564565b005b34801561018557600080fd5b5061018e610764565b60405161019b9190610fd9565b60405180910390f35b3480156101b057600080fd5b506101b961078e565b6040516101c69190610c4e565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f191906110a9565b61079d565b604051610204929190611195565b60405180910390f35b34801561021957600080fd5b5061022261084a565b60405161022f9190610c4e565b60405180910390f35b34801561024457600080fd5b5061024d610872565b60405161025a9190610c4e565b60405180910390f35b34801561026f57600080fd5b5061028a600480360381019061028591906111c5565b61087c565b6040516102979190610fd9565b60405180910390f35b3480156102ac57600080fd5b506102b56108c3565b6040516102c291906111f2565b60405180910390f35b3480156102d757600080fd5b506102e0610951565b6040516102ed9190610c4e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611214565b60405180910390fd5b6103f1828261095d565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610c69565b5b600260149054906101000a900460ff16600181111561048557610484610c69565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e6040518060200160405280600081525061079d565b509050806105ed5747600080549050600260149054906101000a900460ff1660018111156105af576105ae610c69565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e49392919061123d565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561061357610612610c69565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dd9594939291906112ec565b602060405180830381600087803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072f9190611354565b9050807fd3d823b33fdbd81a3e89ad8081a8b676a2d44b8cda9d748f2b437a60218fdc6260405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600260149054906101000a900460ff1660018111156107c5576107c4610c69565b5b600060018111156107d9576107d8610c69565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261080d91906113b0565b1190506000806000805490501190506000804711905083801561082d5750825b80156108365750815b801561083f5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6000808281548110610891576108906113e4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600180546108d090611442565b80601f01602080910402602001604051908101604052809291908181526020018280546108fc90611442565b80156109495780601f1061091e57610100808354040283529160200191610949565b820191906000526020600020905b81548152906001019060200180831161092c57829003601f168201915b505050505081565b60008080549050905090565b6000808054905082600081518110610978576109776113e4565b5b602002602001015161098a91906114a3565b905060008082815481106109a1576109a06113e4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a2a57610a29610d51565b5b604051908082528060200260200182016040528015610a585781602001602082028036833780820191505090505b5060009080519060200190610a6e929190610b8e565b50426003819055506000600260146101000a81548160ff02191690836001811115610a9c57610a9b610c69565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ac790611505565b60006040518083038185875af1925050503d8060008114610b04576040519150601f19603f3d011682016040523d82523d6000602084013e610b09565b606091505b5050905080610b44576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c07579160200282015b82811115610c065782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bae565b5b509050610c149190610c18565b5090565b5b80821115610c31576000816000905550600101610c19565b5090565b6000819050919050565b610c4881610c35565b82525050565b6000602082019050610c636000830184610c3f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ca957610ca8610c69565b5b50565b6000819050610cba82610c98565b919050565b6000610cca82610cac565b9050919050565b610cda81610cbf565b82525050565b6000602082019050610cf56000830184610cd1565b92915050565b6000604051905090565b600080fd5b600080fd5b610d1881610c35565b8114610d2357600080fd5b50565b600081359050610d3581610d0f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8982610d40565b810181811067ffffffffffffffff82111715610da857610da7610d51565b5b80604052505050565b6000610dbb610cfb565b9050610dc78282610d80565b919050565b600067ffffffffffffffff821115610de757610de6610d51565b5b602082029050602081019050919050565b600080fd5b6000610e10610e0b84610dcc565b610db1565b90508083825260208201905060208402830185811115610e3357610e32610df8565b5b835b81811015610e5c5780610e488882610d26565b845260208401935050602081019050610e35565b5050509392505050565b600082601f830112610e7b57610e7a610d3b565b5b8135610e8b848260208601610dfd565b91505092915050565b60008060408385031215610eab57610eaa610d05565b5b6000610eb985828601610d26565b925050602083013567ffffffffffffffff811115610eda57610ed9610d0a565b5b610ee685828601610e66565b9150509250929050565b600080fd5b60008083601f840112610f0b57610f0a610d3b565b5b8235905067ffffffffffffffff811115610f2857610f27610ef0565b5b602083019150836001820283011115610f4457610f43610df8565b5b9250929050565b60008060208385031215610f6257610f61610d05565b5b600083013567ffffffffffffffff811115610f8057610f7f610d0a565b5b610f8c85828601610ef5565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fc382610f98565b9050919050565b610fd381610fb8565b82525050565b6000602082019050610fee6000830184610fca565b92915050565b600080fd5b600067ffffffffffffffff82111561101457611013610d51565b5b61101d82610d40565b9050602081019050919050565b82818337600083830152505050565b600061104c61104784610ff9565b610db1565b90508281526020810184848401111561106857611067610ff4565b5b61107384828561102a565b509392505050565b600082601f8301126110905761108f610d3b565b5b81356110a0848260208601611039565b91505092915050565b6000602082840312156110bf576110be610d05565b5b600082013567ffffffffffffffff8111156110dd576110dc610d0a565b5b6110e98482850161107b565b91505092915050565b60008115159050919050565b611107816110f2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561114757808201518184015260208101905061112c565b83811115611156576000848401525b50505050565b60006111678261110d565b6111718185611118565b9350611181818560208601611129565b61118a81610d40565b840191505092915050565b60006040820190506111aa60008301856110fe565b81810360208301526111bc818461115c565b90509392505050565b6000602082840312156111db576111da610d05565b5b60006111e984828501610d26565b91505092915050565b6000602082019050818103600083015261120c818461115c565b905092915050565b60006040820190506112296000830185610fca565b6112366020830184610fca565b9392505050565b60006060820190506112526000830186610c3f565b61125f6020830185610c3f565b61126c6040830184610c3f565b949350505050565b6000819050919050565b61128781611274565b82525050565b600067ffffffffffffffff82169050919050565b6112aa8161128d565b82525050565b600061ffff82169050919050565b6112c7816112b0565b82525050565b600063ffffffff82169050919050565b6112e6816112cd565b82525050565b600060a082019050611301600083018861127e565b61130e60208301876112a1565b61131b60408301866112be565b61132860608301856112dd565b61133560808301846112dd565b9695505050505050565b60008151905061134e81610d0f565b92915050565b60006020828403121561136a57611369610d05565b5b60006113788482850161133f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113bb82610c35565b91506113c683610c35565b9250828210156113d9576113d8611381565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061145a57607f821691505b6020821081141561146e5761146d611413565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ae82610c35565b91506114b983610c35565b9250826114c9576114c8611474565b5b828206905092915050565b600081905092915050565b50565b60006114ef6000836114d4565b91506114fa826114df565b600082019050919050565b6000611510826114e2565b915081905091905056fea2646970667358221220fb033b9aa1426650964e1095b278798637454be5d33b92047434a3921d2c9f2464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f578063c1c244e811610059578063c1c244e814610238578063e55ae4e814610263578063f2a75fe4146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780636e04ff0d146101cf57806391ad27b41461020d576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c4e565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610ce0565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e94565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610f4b565b610564565b005b34801561018557600080fd5b5061018e610764565b60405161019b9190610fd9565b60405180910390f35b3480156101b057600080fd5b506101b961078e565b6040516101c69190610c4e565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f191906110a9565b61079d565b604051610204929190611195565b60405180910390f35b34801561021957600080fd5b5061022261084a565b60405161022f9190610c4e565b60405180910390f35b34801561024457600080fd5b5061024d610872565b60405161025a9190610c4e565b60405180910390f35b34801561026f57600080fd5b5061028a600480360381019061028591906111c5565b61087c565b6040516102979190610fd9565b60405180910390f35b3480156102ac57600080fd5b506102b56108c3565b6040516102c291906111f2565b60405180910390f35b3480156102d757600080fd5b506102e0610951565b6040516102ed9190610c4e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611214565b60405180910390fd5b6103f1828261095d565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610c69565b5b600260149054906101000a900460ff16600181111561048557610484610c69565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e6040518060200160405280600081525061079d565b509050806105ed5747600080549050600260149054906101000a900460ff1660018111156105af576105ae610c69565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e49392919061123d565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561061357610612610c69565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dd9594939291906112ec565b602060405180830381600087803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072f9190611354565b9050807fd3d823b33fdbd81a3e89ad8081a8b676a2d44b8cda9d748f2b437a60218fdc6260405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600260149054906101000a900460ff1660018111156107c5576107c4610c69565b5b600060018111156107d9576107d8610c69565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261080d91906113b0565b1190506000806000805490501190506000804711905083801561082d5750825b80156108365750815b801561083f5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6000808281548110610891576108906113e4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600180546108d090611442565b80601f01602080910402602001604051908101604052809291908181526020018280546108fc90611442565b80156109495780601f1061091e57610100808354040283529160200191610949565b820191906000526020600020905b81548152906001019060200180831161092c57829003601f168201915b505050505081565b60008080549050905090565b6000808054905082600081518110610978576109776113e4565b5b602002602001015161098a91906114a3565b905060008082815481106109a1576109a06113e4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a2a57610a29610d51565b5b604051908082528060200260200182016040528015610a585781602001602082028036833780820191505090505b5060009080519060200190610a6e929190610b8e565b50426003819055506000600260146101000a81548160ff02191690836001811115610a9c57610a9b610c69565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ac790611505565b60006040518083038185875af1925050503d8060008114610b04576040519150601f19603f3d011682016040523d82523d6000602084013e610b09565b606091505b5050905080610b44576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c07579160200282015b82811115610c065782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bae565b5b509050610c149190610c18565b5090565b5b80821115610c31576000816000905550600101610c19565b5090565b6000819050919050565b610c4881610c35565b82525050565b6000602082019050610c636000830184610c3f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ca957610ca8610c69565b5b50565b6000819050610cba82610c98565b919050565b6000610cca82610cac565b9050919050565b610cda81610cbf565b82525050565b6000602082019050610cf56000830184610cd1565b92915050565b6000604051905090565b600080fd5b600080fd5b610d1881610c35565b8114610d2357600080fd5b50565b600081359050610d3581610d0f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8982610d40565b810181811067ffffffffffffffff82111715610da857610da7610d51565b5b80604052505050565b6000610dbb610cfb565b9050610dc78282610d80565b919050565b600067ffffffffffffffff821115610de757610de6610d51565b5b602082029050602081019050919050565b600080fd5b6000610e10610e0b84610dcc565b610db1565b90508083825260208201905060208402830185811115610e3357610e32610df8565b5b835b81811015610e5c5780610e488882610d26565b845260208401935050602081019050610e35565b5050509392505050565b600082601f830112610e7b57610e7a610d3b565b5b8135610e8b848260208601610dfd565b91505092915050565b60008060408385031215610eab57610eaa610d05565b5b6000610eb985828601610d26565b925050602083013567ffffffffffffffff811115610eda57610ed9610d0a565b5b610ee685828601610e66565b9150509250929050565b600080fd5b60008083601f840112610f0b57610f0a610d3b565b5b8235905067ffffffffffffffff811115610f2857610f27610ef0565b5b602083019150836001820283011115610f4457610f43610df8565b5b9250929050565b60008060208385031215610f6257610f61610d05565b5b600083013567ffffffffffffffff811115610f8057610f7f610d0a565b5b610f8c85828601610ef5565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fc382610f98565b9050919050565b610fd381610fb8565b82525050565b6000602082019050610fee6000830184610fca565b92915050565b600080fd5b600067ffffffffffffffff82111561101457611013610d51565b5b61101d82610d40565b9050602081019050919050565b82818337600083830152505050565b600061104c61104784610ff9565b610db1565b90508281526020810184848401111561106857611067610ff4565b5b61107384828561102a565b509392505050565b600082601f8301126110905761108f610d3b565b5b81356110a0848260208601611039565b91505092915050565b6000602082840312156110bf576110be610d05565b5b600082013567ffffffffffffffff8111156110dd576110dc610d0a565b5b6110e98482850161107b565b91505092915050565b60008115159050919050565b611107816110f2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561114757808201518184015260208101905061112c565b83811115611156576000848401525b50505050565b60006111678261110d565b6111718185611118565b9350611181818560208601611129565b61118a81610d40565b840191505092915050565b60006040820190506111aa60008301856110fe565b81810360208301526111bc818461115c565b90509392505050565b6000602082840312156111db576111da610d05565b5b60006111e984828501610d26565b91505092915050565b6000602082019050818103600083015261120c818461115c565b905092915050565b60006040820190506112296000830185610fca565b6112366020830184610fca565b9392505050565b60006060820190506112526000830186610c3f565b61125f6020830185610c3f565b61126c6040830184610c3f565b949350505050565b6000819050919050565b61128781611274565b82525050565b600067ffffffffffffffff82169050919050565b6112aa8161128d565b82525050565b600061ffff82169050919050565b6112c7816112b0565b82525050565b600063ffffffff82169050919050565b6112e6816112cd565b82525050565b600060a082019050611301600083018861127e565b61130e60208301876112a1565b61131b60408301866112be565b61132860608301856112dd565b61133560808301846112dd565b9695505050505050565b60008151905061134e81610d0f565b92915050565b60006020828403121561136a57611369610d05565b5b60006113788482850161133f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113bb82610c35565b91506113c683610c35565b9250828210156113d9576113d8611381565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061145a57607f821691505b6020821081141561146e5761146d611413565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ae82610c35565b91506114b983610c35565b9250826114c9576114c8611474565b5b828206905092915050565b600081905092915050565b50565b60006114ef6000836114d4565b91506114fa826114df565b600082019050919050565b6000611510826114e2565b915081905091905056fea2646970667358221220fb033b9aa1426650964e1095b278798637454be5d33b92047434a3921d2c9f2464736f6c63430008090033",
  "devdoc": {
    "author": "Dinesh Jayasiri",
    "details": "this implements Cahinlink VRF v2 and cahinlink keepers",
    "kind": "dev",
    "methods": {},
    "title": "A sample Raffle Contracts ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 236,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 253,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "empty",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 255,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 258,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)231"
      },
      {
        "astId": 260,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)231": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}